#  dimacs(G, c, k, filename)
def write_dimacs(G, c, k, filename):
    with open(filename, "w") as f:
        # write the header
        f.write("c This is a graph generated by the stochastic block model in DIMACS format.\n")

        f.write("p EDGE {} {} {}\n".format(G.number_of_nodes(), G.number_of_edges(), k))
        # now write all edges
        for u, v in G.edges():
            f.write("e {} {}\n".format(u, v))
        for i in range(len(c)):
            f.write("n {} {}\n".format(c[i], i))

def read_dimacs(filename):
    with open(filename, "r") as f:
        G=nx.graph()
        n = -1
        m = -1
        m_cnt = 0
        for i,l in enumerate(f.readlines()):
            if l[0]=='c':
                 continue
            if l[0]=='p':
                if n>=0:
                    raise ValueError("Syntax error: "+ "line {} contains a second spec line.".format(i))
                _,fmt,nstr,mstr = l.split()
                if fmt!='EDGE':
                     raise ValueError("Input error: "+ "Dimacs \'edge\' format expected.".format(i))
                n = int(nstr)
                m = int(mstr)
                G.add_nodes_from(range(n))
                continue
            if l[0]=='e':
                m_cnt +=1
                _,v,w=l.split()
                G.add_edge(int(v),int(w))

            if l[0]=='n':
                _,v,w=l.split()
                G.nodes[v]["c"]=w

    if m!=m_cnt:
        raise ValueError("Syntax error: "+"{} edges were expected.".format(m))
    return G
