import networkx as nx
import numpy as np
import random
from dimacs import *

def genSBM(n, k, p, q, s): #n=number of vertices, k=number of partitions, p=edge probabilities inside communities, q=intercommunity edge probabilities, s=probability seed
    sizes=np.zeros(k,dtype=int)
    c=np.zeros(k,dtype=int) #pre-colored vertices
    for i in range(k):
        sizes[i]=int(n/k)
        c[i]=random.randint(i*int(n/k), (i+1)*int(n/k))

    p1=np.ones((k,k))
    p1=q*p1
    p2=np.identity(k)
    p2=(p-q)*p2
    probs=p1+p2
    probs=probs.tolist()
    G=nx.stochastic_block_model(sizes, probs,seed=s)
    U=set(G.nodes)
    V=[]
    for i in range(k):
        G.nodes[c[i]]["c"]=i
        A=set()
        A.add(c[i])
        V.append(A)
        U.remove(c[i])

    return G,V,U #G=the graph, V=[V_1,...,V_k] colour classes, U=uncoloured vertices
   # filename="SBM_n="+str(n)+"_k="+str(k)+"_p="+str(round(p,2))+"_q="+str(round(q,3))+"_seed="+str(s)+".txt"

  #  dimacs(G, c, k, filename)
def dimacs(G, c, k, filename):
    with open(filename, "w") as f:
        # write the header
        f.write("c This is a graph generated by the stochastic block model in DIMACS format.\n")

        f.write("p EDGE {} {} {}\n".format(G.number_of_nodes(), G.number_of_edges(), k))
        # now write all edges
        for u, v in G.edges():
            f.write("e {} {}\n".format(u, v))
        for i in range(len(c)):
            f.write("n {} {}\n".format(c[i], i))

